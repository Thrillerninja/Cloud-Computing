- name: Configure Monitoring Stack
  hosts: monitoring-vm
  become: true
  vars_files:
    - ./passwords.yml
  vars:
    grafana_version: "10.0.0"
    prometheus_version: "2.45.0"
    node_exporter_version: "1.6.0"
    postgres_exporter_version: "0.13.0"
    db_host: "{{ hostvars['db-vm']['ansible_host'] }}"
    db_port: 5432
    app_host: "{{ hostvars['app-vm']['ansible_host'] }}"
    pgadmin_host: "{{ hostvars['pgadmin-vm']['ansible_host'] }}"
  
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        
    - name: Create service users
      user:
        name: "{{ item }}"
        system: yes
        shell: /bin/false
      loop:
        - prometheus
        - grafana
        - node_exporter
        
    - name: Install dependencies
      apt:
        name:
          - curl
          - wget
          - gnupg
          - apt-transport-https
          - software-properties-common
          - python3-pip
        state: present

    # Install Prometheus
    - name: Download Prometheus
      get_url:
        url: "https://github.com/prometheus/prometheus/releases/download/v{{ prometheus_version }}/prometheus-{{ prometheus_version }}.linux-amd64.tar.gz"
        dest: /tmp/prometheus.tar.gz
        
    - name: Create Prometheus directories
      file:
        path: "{{ item }}"
        state: directory
        owner: prometheus
        group: prometheus
      loop:
        - /etc/prometheus
        - /var/lib/prometheus
        
    - name: Extract Prometheus
      unarchive:
        src: /tmp/prometheus.tar.gz
        dest: /tmp
        remote_src: yes
        
    - name: Copy Prometheus binaries
      copy:
        src: "/tmp/prometheus-{{ prometheus_version }}.linux-amd64/{{ item }}"
        dest: "/usr/local/bin/{{ item }}"
        remote_src: yes
        owner: prometheus
        group: prometheus
        mode: 0755
      loop:
        - prometheus
        - promtool
        
    - name: Copy Prometheus configuration
      template:
        src: prometheus.yml.j2
        dest: /etc/prometheus/prometheus.yml
        owner: prometheus
        group: prometheus
        mode: 0644
      notify: Restart Prometheus
        
    - name: Create Prometheus systemd service
      copy:
        dest: /etc/systemd/system/prometheus.service
        content: |
          [Unit]
          Description=Prometheus
          Wants=network-online.target
          After=network-online.target
          
          [Service]
          User=prometheus
          Group=prometheus
          Type=simple
          ExecStart=/usr/local/bin/prometheus \
            --config.file=/etc/prometheus/prometheus.yml \
            --storage.tsdb.path=/var/lib/prometheus/ \
            --web.console.templates=/etc/prometheus/consoles \
            --web.console.libraries=/etc/prometheus/console_libraries
          
          [Install]
          WantedBy=multi-user.target
        mode: 0644
      notify: Restart Prometheus

    # Install Node Exporter on all hosts
    - name: Install Node Exporter on all hosts
      include_tasks: node_exporter.yml
      delegate_to: "{{ item }}"
      loop:
        - "{{ groups['db-vm'] }}"
        - "{{ groups['app-vm'] }}"
        - "{{ groups['pgadmin-vm'] }}"
        - "{{ inventory_hostname }}"

    # Install PostgreSQL Exporter
    - name: Install PostgreSQL Exporter
      include_tasks: postgres_exporter.yml
      delegate_to: "{{ groups['db-vm'][0] }}"

    # Install Grafana
    - name: Add Grafana APT key
      apt_key:
        url: https://packages.grafana.com/gpg.key
        state: present
        
    - name: Add Grafana repository
      apt_repository:
        repo: "deb https://packages.grafana.com/oss/deb stable main"
        state: present
        filename: grafana
        
    - name: Install Grafana
      apt:
        name: grafana
        state: present
        update_cache: yes
      notify: Restart Grafana
        
    - name: Configure Grafana provisioning
      copy:
        dest: /etc/grafana/provisioning/datasources/prometheus.yml
        content: |
          apiVersion: 1
          datasources:
            - name: Prometheus
              type: prometheus
              access: proxy
              url: http://localhost:9090
              isDefault: true
        mode: 0644
      notify: Restart Grafana
        
    - name: Enable and start services
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      loop:
        - prometheus
        - grafana-server
        
    - name: Wait for Grafana to start
      wait_for:
        port: 3000
        timeout: 60
        
    - name: Set up Grafana admin password
      uri:
        url: http://localhost:3000/api/user/password
        method: PUT
        user: admin
        password: admin
        force_basic_auth: yes
        body_format: json
        body:
          oldPassword: admin
          newPassword: "{{ grafana_admin_password }}"
        status_code: 200
        headers:
          Content-Type: "application/json"
          
    - name: Import PostgreSQL Dashboard
      uri:
        url: http://localhost:3000/api/dashboards/db
        method: POST
        user: admin
        password: "{{ grafana_admin_password }}"
        force_basic_auth: yes
        body_format: json
        body: "{{ lookup('file', 'postgres_dashboard.json') }}"
        status_code: 200
        headers:
          Content-Type: "application/json"
          
    - name: Import Node Exporter Dashboard
      uri:
        url: http://localhost:3000/api/dashboards/db
        method: POST
        user: admin
        password: "{{ grafana_admin_password }}"
        force_basic_auth: yes
        body_format: json
        body: "{{ lookup('file', 'node_exporter_dashboard.json') }}"
        status_code: 200
        headers:
          Content-Type: "application/json"
          
    - name: Open firewall ports
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - '3000'  # Grafana
        - '9090'  # Prometheus
          
  handlers:
    - name: Restart Prometheus
      systemd:
        name: prometheus
        state: restarted
        
    - name: Restart Grafana
      systemd:
        name: grafana-server
        state: restarted
