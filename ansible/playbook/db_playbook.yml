# Configure PostgreSQL
- name: Configure PostgreSQL
  hosts: database
  vars:
    ansible_python_interpreter: /usr/bin/python3
  vars_files:
    - ./passwords.yml
  tasks:
    - name: Install PostgreSQL and Python prerequisites
      become: true
      apt:
        update_cache: yes
        name:
          - postgresql
          - postgresql-contrib
          - python3-psycopg2
          - acl
        state: present

    - name: Ensure PostgreSQL is started and enabled
      become: true
      service:
        name: postgresql
        state: started
        enabled: yes

    - name: Create PostgreSQL user
      become: true
      command: sudo -u postgres psql -c "CREATE USER {{ DB_USER }} WITH PASSWORD '{{ DB_PASSWORD }}' CREATEDB;"
      register: create_user_output
      failed_when: create_user_output.rc != 0 and "already exists" not in create_user_output.stderr
      changed_when: create_user_output.rc == 0

    - name: Create PostgreSQL database
      become: true
      command: sudo -u postgres psql -c "CREATE DATABASE {{ DB_NAME }} OWNER {{ DB_USER }};"
      register: create_db_output
      failed_when: create_db_output.rc != 0 and "already exists" not in create_db_output.stderr
      changed_when: create_db_output.rc == 0

    # Find PostgreSQL configuration files
    - name: Find postgresql.conf file
      become: true
      shell: find /etc/postgresql -name postgresql.conf | head -n 1
      register: postgresql_conf_path
      changed_when: false

    - name: Find pg_hba.conf file
      become: true
      shell: find /etc/postgresql -name pg_hba.conf | head -n 1
      register: pg_hba_conf_path
      changed_when: false

    # Modify configuration files directly
    - name: Update postgresql.conf for remote connections
      become: true
      lineinfile:
        path: "{{ postgresql_conf_path.stdout }}"
        regexp: '^#?listen_addresses\s*=\s*.*$'
        line: "listen_addresses = '*'"
        state: present
      register: postgresql_conf_updated

    - name: Add entry to pg_hba.conf for remote connections
      become: true
      lineinfile:
        path: "{{ pg_hba_conf_path.stdout }}"
        regexp: '^host\s+all\s+all\s+0.0.0.0/0\s+.*$'
        line: 'host    all             all             0.0.0.0/0               md5'
        state: present
      register: pg_hba_conf_updated

    - name: Restart PostgreSQL if configuration was updated
      become: true
      service:
        name: postgresql
        state: restarted
      when: postgresql_conf_updated.changed or pg_hba_conf_updated.changed

    # Create directory for SQL scripts
    - name: Create directory for SQL scripts
      become: true
      file:
        path: /tmp/sql
        state: directory
        mode: '0755'

    # Download or copy your SQL scripts
    - name: Clone repository containing SQL scripts
      become: true
      git:
        repo: 'https://github.com/Thrillerninja/Cloud-Computing.git'
        dest: /tmp/sql-repo
        version: main

    - name: Find SQL files in repository
      become: true
      find:
        paths: /tmp/sql-repo/sql_definitions
        patterns: "*.sql"
        recurse: yes
      register: sql_files
      changed_when: false

    - name: Display found SQL files
      debug:
        var: sql_files

    - name: Copy found SQL files to working directory
      become: true
      copy:
        src: "{{ item.path }}"
        dest: "/tmp/sql/"
        remote_src: yes
      loop: "{{ sql_files.files }}"
      when: sql_files.matched > 0

    - name: List SQL files in destination directory
      become: true
      shell: ls -la /tmp/sql/
      register: sql_dir_contents
      changed_when: false

    - name: Display SQL files in destination directory
      debug:
        var: sql_dir_contents.stdout_lines

    # Execute SQL scripts
    - name: Execute SQL initialization scripts
      become: true
      command: sudo -u postgres psql -d {{ DB_NAME }} -f /tmp/sql/{{ item }}
      with_items:
        - init_ip_mapping.sql
        - init_locations.sql
        - init_networks.sql
      register: sql_execution
      failed_when: sql_execution.rc != 0 and "already exists" not in sql_execution.stderr
      changed_when: sql_execution.rc == 0
      ignore_errors: true

    # Grant privileges
    - name: Grant privileges to user on all database objects
      become: true
      command: sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE {{ DB_NAME }} TO {{ DB_USER }};"

    - name: Grant privileges on all tables in public schema
      become: true
      command: sudo -u postgres psql -d {{ DB_NAME }} -c "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO {{ DB_USER }};"

    - name: Grant privileges on all sequences in public schema
      become: true
      command: sudo -u postgres psql -d {{ DB_NAME }} -c "GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO {{ DB_USER }};"

    - name: Grant privileges on all functions in public schema
      become: true
      command: sudo -u postgres psql -d {{ DB_NAME }} -c "GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public TO {{ DB_USER }};"
