name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  test-nextjs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd geoip-frontend
          npm install

      - name: Run tests
        run: |
          cd geoip-frontend
          npm test

  terraform-apply:
    runs-on: ubuntu-latest
    needs: test-nextjs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Create keys directory
        run: |
          mkdir -p terraform/keys

      - name: Create keys.tf file
        run: |
          cat <<EOF > terraform/keys/keys.tf
          output "subscription_id" {
            value = "${{ secrets.SUBSCRIPTION_ID }}"
          }

          output "client_id" {
            value = "${{ secrets.CLIENT_ID }}"
          }

          output "client_secret" {
            value = "${{ secrets.CLIENT_SECRET }}"
          }

          output "tenant_id" {
            value = "${{ secrets.TENANT_ID }}"
          }

          output "administrator_login" {
            value = "${{ secrets.DB_USER }}"
          }

          output "administrator_password" {
            value = "${{ secrets.DB_PASSWORD }}"
          }

          output "database_name" {
            value = "${{ secrets.DB_NAME }}"
          }
          EOF

      - name: Delete existing resource group
        run: |
          cd terraform
          az login --service-principal -u "${{ secrets.CLIENT_ID }}" -p "${{ secrets.CLIENT_SECRET }}" --tenant "${{ secrets.TENANT_ID }}"
          az group delete --name cloud-computing-rg --yes || echo "Resource group does not exist, continuing..."
          az group wait --deleted --name cloud-computing-rg

      - name: Initialize Terraform
        run: |
          cd terraform
          terraform init

      - name: Apply Terraform (first run)
        run: |
          cd terraform
          terraform apply -auto-approve

      # - name: Apply Terraform (second run)
      #   run: |
      #     cd terraform
      #     terraform apply -auto-approve

      - name: Output Terraform results
        run: |
          cd terraform
          terraform output -json > terraform_output.json

      - name: Upload inventory file
        uses: actions/upload-artifact@v4
        with:
          name: inventory
          path: terraform/ansible/inventory.ini

  ansible-deploy:
    runs-on: ubuntu-latest
    needs: terraform-apply
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Delete existing inventory file
        run: rm -f ansible/inventory.ini

      - name: Download inventory file
        uses: actions/download-artifact@v4
        with:
          name: inventory
          path: ansible

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: pip install ansible

      - name: Set Ansible vault password
        run: echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > ~/.ansible_vault_password

      - name: Disable SSH host key checking
        run: |
          mkdir -p ~/.ssh
          echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
  
      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/ssh_key
          chmod 600 ~/.ssh/ssh_key
          chmod 700 ~/.ssh
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/ssh_key

      - name: Debug SSH Key Permissions
        run: ls -l ~/.ssh/ssh_key

      - name: Run Ansible playbook
        env:
          ANSIBLE_VAULT_PASSWORD_FILE: ~/.ansible_vault_password
        run: |
          # Copy SSH key to where Ansible is looking for it (relative to ansible directory)
          mkdir -p .ssh
          cp /home/runner/.ssh/ssh_key .ssh/
          chmod 600 .ssh/ssh_key
          
          # Run Ansible with the key in the expected location
          cd ansible
          export ANSIBLE_HOST_KEY_CHECKING=False
          ansible-playbook main_playbook.yml -i inventory.ini --vault-password-file ~/.ansible_vault_password --private-key ../.ssh/ssh_key -vv

  check-webpages:
    runs-on: ubuntu-latest
    needs: ansible-deploy
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download inventory file
        uses: actions/download-artifact@v4
        with:
          name: inventory
          path: ansible

      - name: Extract IPs from inventory and check services
        run: |
          cd ansible
          db_public_ip=$(grep 'db ansible_host' inventory.ini | cut -d '=' -f2 | cut -d 'a' -f1 | tr -d ' ')
          pgadmin_public_ip=$(grep 'monitoring ansible_host' inventory.ini | cut -d '=' -f2 | cut -d 'a' -f1 | tr -d ' ')
          loadbalancer_public_ip=$(grep 'loadbalancer ansible_host' inventory.ini | cut -d '=' -f2 | cut -d 'a' -f1 | tr -d ' ')
          
          # Check PostgreSQL port with TCP connection test
          echo "Checking PostgreSQL connection..."
          if ! timeout 10 bash -c "</dev/tcp/$db_public_ip/5432"; then
            echo "Error: PostgreSQL at $db_public_ip:5432 is not reachable"
            exit 1
          fi
          
          # Check HTTP services - more flexible matching for HTTP status codes
          http_urls=(
            "http://$pgadmin_public_ip:5050"
            "http://$loadbalancer_public_ip:80"
          )

          for url in "${http_urls[@]}"; do
            echo "Checking $url..."
            response=$(curl -s --head --request GET "$url")
            
            # Use grep with case-insensitive matching (-i) and match HTTP status codes
            if echo "$response" | grep -i -E "HTTP/[0-9.]+ (200|302)"; then
              echo "$url is responding"
            else
              echo "Error: $url is not reachable"
              echo "Response was:"
              echo "$response"
              exit 1
            fi
          done
          
          echo "All service checks passed successfully!"
